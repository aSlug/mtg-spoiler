{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","state","collection","identifiers","this","props","cardList","map","cardName","Scry","byName","waitForAll","then","setState","groups","filter","isMonoW","sort","byRarity","isMonoU","isMonoB","isMonoR","isMonoG","isMulticolor","isColorless","isLand","className","hAlignContent","column","group","i","key","_","chunk","row","card","alt","name","title","src","image_uris","normal","undefined","React","Component","c","colors","length","includes","type_line","a","b","rarityScore","r","rarity","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","cube","cards","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6mJAmEeA,EArDf,4MACEC,MAAQ,CAAEC,WAAY,IADxB,kEAGuB,IAAD,SACZC,EAAcC,KAAKC,MAAMC,SAASC,KAAI,SAACC,GAAD,OAC1CC,iBAAoBC,OAAOF,OAE7B,EAAAC,SAAWP,WAAX,oBAAyBC,IACtBQ,aACAC,MAAK,SAACV,GACL,EAAKW,SAAS,CAAEX,WAAYA,SAVpC,+BAcY,IACAA,EAAeE,KAAKH,MAApBC,WACFY,EAAS,CACbZ,EAAWa,OAAOC,GAASC,KAAKC,GAChChB,EAAWa,OAAOI,GAASF,KAAKC,GAChChB,EAAWa,OAAOK,GAASH,KAAKC,GAChChB,EAAWa,OAAOM,GAASJ,KAAKC,GAChChB,EAAWa,OAAOO,GAASL,KAAKC,GAChChB,EAAWa,OAAOQ,GAAcN,KAAKC,GACrChB,EAAWa,OAAOS,GAAaP,KAAKC,GACpChB,EAAWa,OAAOU,GAAQR,KAAKC,IAGjC,OACE,kBAAC,IAAD,CAAUQ,UAAU,MAAMC,cAAc,UACtC,kBAAC,IAAD,CAAUC,QAAM,GACbd,EAAOP,KAAI,SAACsB,EAAOC,GAAR,OACV,kBAAC,IAAD,CAAUF,QAAM,EAACF,UAAU,QAAQK,IAAKD,GACrCE,IAAEC,MAAMJ,EAAO,GAAGtB,KAAI,SAAC2B,EAAKJ,GAAN,OACrB,kBAAC,IAAD,CAAUJ,UAAU,MAAMK,IAAKD,GAC5BI,EAAI3B,KAAI,SAAC4B,EAAML,GAAP,OACP,yBACEJ,UAAU,OACVU,IAAKD,EAAKE,KACVC,MAAOH,EAAKE,KACZE,IAAKJ,EAAKK,WAAaL,EAAKK,WAAWC,YAASC,EAChDX,IAAKD,qBAxC3B,GAAyBa,IAAMC,WAuDzB5B,EAAU,SAAC6B,GAAD,OACdA,EAAEC,QAA8B,IAApBD,EAAEC,OAAOC,QAAgBF,EAAEC,OAAOE,SAAS,MACnD7B,EAAU,SAAC0B,GAAD,OACdA,EAAEC,QAA8B,IAApBD,EAAEC,OAAOC,QAAgBF,EAAEC,OAAOE,SAAS,MACnD5B,EAAU,SAACyB,GAAD,OACdA,EAAEC,QAA8B,IAApBD,EAAEC,OAAOC,QAAgBF,EAAEC,OAAOE,SAAS,MACnD3B,EAAU,SAACwB,GAAD,OACdA,EAAEC,QAA8B,IAApBD,EAAEC,OAAOC,QAAgBF,EAAEC,OAAOE,SAAS,MACnD1B,EAAU,SAACuB,GAAD,OACdA,EAAEC,QAA8B,IAApBD,EAAEC,OAAOC,QAAgBF,EAAEC,OAAOE,SAAS,MACnDzB,EAAe,SAACsB,GAAD,OAAkBA,EAAEC,QAAUD,EAAEC,OAAOC,OAAS,GAC/DvB,EAAc,SAACqB,GAAD,OAClBA,EAAEC,QAA8B,IAApBD,EAAEC,OAAOC,SAAiBF,EAAEI,UAAUD,SAAS,SACvDvB,EAAS,SAACoB,GAAD,OAAkBA,EAAEI,UAAUD,SAAS,SAEhD9B,EAAW,SAACgC,EAAcC,GAC9B,IAAMC,EAAc,SAACC,GAAD,MACZ,WAANA,EAAiB,EAAU,SAANA,EAAe,EAAU,aAANA,EAAmB,EAAI,GACjE,OAAOD,EAAYF,EAAEI,QAAUF,EAAYD,EAAEG,SC3E3BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAKxD,SAAUyD,EAAKC,SAEtBC,SAASC,eAAe,SD+HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzD,MAAK,SAAA0D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c78eecca.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport FlexView from \"react-flexview\";\nimport _ from \"lodash\";\nimport * as Scry from \"scryfall-sdk\";\n\ntype Props = {\n  cardList: string[];\n};\n\ntype State = {\n  collection: Scry.Card[];\n};\n\nexport class App extends React.Component<Props, State> {\n  state = { collection: [] as Scry.Card[] };\n\n  componentDidMount() {\n    const identifiers = this.props.cardList.map((cardName) =>\n      Scry.CardIdentifier.byName(cardName)\n    );\n    Scry.Cards.collection(...identifiers)\n      .waitForAll()\n      .then((collection) => {\n        this.setState({ collection: collection });\n      });\n  }\n\n  render() {\n    const { collection } = this.state;\n    const groups = [\n      collection.filter(isMonoW).sort(byRarity),\n      collection.filter(isMonoU).sort(byRarity),\n      collection.filter(isMonoB).sort(byRarity),\n      collection.filter(isMonoR).sort(byRarity),\n      collection.filter(isMonoG).sort(byRarity),\n      collection.filter(isMulticolor).sort(byRarity),\n      collection.filter(isColorless).sort(byRarity),\n      collection.filter(isLand).sort(byRarity),\n    ];\n\n    return (\n      <FlexView className=\"App\" hAlignContent=\"center\">\n        <FlexView column>\n          {groups.map((group, i) => (\n            <FlexView column className=\"group\" key={i}>\n              {_.chunk(group, 5).map((row, i) => (\n                <FlexView className=\"row\" key={i}>\n                  {row.map((card, i) => (\n                    <img\n                      className=\"card\"\n                      alt={card.name}\n                      title={card.name}\n                      src={card.image_uris ? card.image_uris.normal : undefined}\n                      key={i}\n                    />\n                  ))}\n                </FlexView>\n              ))}\n            </FlexView>\n          ))}\n        </FlexView>\n      </FlexView>\n    );\n  }\n}\n\nexport default App;\n\nconst isMonoW = (c: Scry.Card) =>\n  c.colors && c.colors.length === 1 && c.colors.includes(\"W\");\nconst isMonoU = (c: Scry.Card) =>\n  c.colors && c.colors.length === 1 && c.colors.includes(\"U\");\nconst isMonoB = (c: Scry.Card) =>\n  c.colors && c.colors.length === 1 && c.colors.includes(\"B\");\nconst isMonoR = (c: Scry.Card) =>\n  c.colors && c.colors.length === 1 && c.colors.includes(\"R\");\nconst isMonoG = (c: Scry.Card) =>\n  c.colors && c.colors.length === 1 && c.colors.includes(\"G\");\nconst isMulticolor = (c: Scry.Card) => c.colors && c.colors.length > 1;\nconst isColorless = (c: Scry.Card) =>\n  c.colors && c.colors.length === 0 && !c.type_line.includes(\"Land\");\nconst isLand = (c: Scry.Card) => c.type_line.includes(\"Land\");\n\nconst byRarity = (a: Scry.Card, b: Scry.Card) => {\n  const rarityScore = (r: string) =>\n    r === \"mythic\" ? 0 : r === \"rare\" ? 1 : r === \"uncommon\" ? 2 : 3;\n  return rarityScore(a.rarity) - rarityScore(b.rarity);\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport cube from \"./resources/cube.json\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App cardList={cube.cards} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}